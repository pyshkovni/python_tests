# Отладка

# Это процесс поиска и устранения ошибок. Ошибки могут быть связаны с синтаксисом, логикой программы
# или использованием библиотек.

# В коде всегда есть ошибки, так как код всегда развивается.
# Есть несколько методик отладки кода.

# Вариант 1: трассировка кода
# Для того, чтобы увидеть, что делает код в том или ином месте,
# необходимо в интересующих местах выполнения расставить print() с выводом ключевых значений
# (или логировать в файл)

def get_time_track(precision):
    print('получили точность, с которой надо выводить результат')
    print('начинаем создавать декоратор')
    def time_track(func):
        print(f'декоратор принял на вход функцию, которую надо отдекорировать - {func}')
        print('начинает создавать функцию-обертку')
        def wrapper(*args, **kwargs):
            print('мы в функции-обертке, которая заместит реальную функиию func')
            print('засекаем время')
            started_at = time.time()
            print('запускаем реальную функцию с переданными в функию-обертку параметрами и запоминаем результат')
            result = func(*args, **kwargs)
            print('определяем затраченное время и выводим его')
            ended_at = time.time()
            print(f'вот тут-то и пригодится precision (== {precision}) - он запомнился в замыкании wrapper')
            elapsed = round(ended_at - started_at, precision)
            print(f'Функция работала {elapsed} секунд(ы)')
            print('возвращаем результат, который вернула реальная функция')
            return result
        print('декоратор создал функцию-обертку и возвращает её')
        return wrapper
    print('декоратор создан и пора его вернуть')
    return time_track

# Трассировка позволяет увидеть весь ход выполнения кода.
# Преимущества:
# + позволяет найти места изменения значений в разные моменты времени выполнения кода
# + применима в сложных условиях (например на сервере нет доступа к портам для отладчика)
# Недостатки:
# - растет объем из-за множества вставок в print()
# - замедляет выполнение программы
# - сложно переключать между трассировкой и готовым кодом


# Вариант 2: Встроенный отладчик в среде разработки (Debug).

# Отладчик - это компонент среды разработки, который позволяет выполнять отладку.
# Отладчики предоставляют инструменты для остановки программы в определенных точках (breakpoints) для того,
# чтобы проверить значения переменных, исследовать стеки вызовов и пошагово выполнять код.

# Это наиболее распространенный способ отладки кода программистом при разработке.
# Но программа-отладчик может запускаться и без среды разработки, например на удаленных серверах

# Преимущества отладчика:
#  + полный контроль и анализ состояния программы в момент точки останова
#  + возможность следить за ходом выполнения алгоритма
# Недостатки:
#  - иногда сложно поймать необходимое состояние программы
#  (например, большой массив входных данных, а ошибка возникает только в одном случае)

# Распространенные приемы работы с отладчиком
# 1) Условные точки останова
# 2) Наблюдение за переменными
# 3) Интерактивное изменение значений переменных

